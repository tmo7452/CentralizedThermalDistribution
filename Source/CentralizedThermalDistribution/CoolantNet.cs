using System.Collections.Generic;
using System.Text;
using Verse;

namespace CentralizedThermalDistribution
{
    public class CoolantNet
    {
        public bool NetIsActive = false;
        public float NetCoolantTemperature = 0.0f;
        public List<CompCoolantConditioner> Conditioners = new();

        public float AverageConvertedTemperature; // Delete

        public float AverageIntakeTemperature; // Delete

        public List<CompCoolant> Connectors = new List<CompCoolant>();
        public List<CompCoolantConsumer> Consumers = new List<CompCoolantConsumer>(); // Delete?
        public float FlowEfficiency = 1.0f; // Delete

        public CoolantPipeColor FlowType;
        public List<CompCoolantProducer> Producers = new List<CompCoolantProducer>(); // Delete
        //public List<CompCoolantFlowCCU> TempControls = new List<CompCoolantFlowCCU>(); // Delete

        public float ThermalCapacity; // Delete
        public float ThermalEfficiency = 1.0f; // Delete

        public int GridID { get; set; } = -2;

        public float CurrentIntakeAir { get; private set; } // Delete

        public float CurrentExhaustAir { get; private set; } // Delete

        /// <summary>
        ///     Tick the Producers of Air Flow.
        ///     We calculate the Intake Temperature here and the Total Air generated by the network.
        /// </summary>
        private void TickProducers()
        {
            var airFlow = 0.0f;
            var tempSum = 0.0f;
            var activeCount = 0;

            foreach (var producer in Producers)
            {
                if (!producer.IsConnected() || !producer.IsActive())
                {
                    continue;
                }

                airFlow += producer.CurrentAirFlow;
                tempSum += producer.IntakeTemperature;
                activeCount++;
            }

            if (activeCount > 0)
            {
                AverageIntakeTemperature = tempSum / activeCount;
                CurrentIntakeAir = airFlow;
            }
            else
            {
                AverageIntakeTemperature = 0.0f;
            }

            CurrentIntakeAir = airFlow;
        }

        /// <summary>
        ///     Tick the coolant conditioners.
        ///     We calculate ...
        /// </summary>
        private void TickConditioners()
        {
            int activeCount = 0;
            float massSum = 0;
            float energySum = 0f; 

            foreach (var conditioner in Conditioners)
            {
                if (!conditioner.IsConnected() || !conditioner.IsActive())
                {
                    continue;
                }

                massSum += conditioner.CoolantThermalMass;
                energySum += conditioner.CoolantThermalMass * conditioner.CoolantTemperature;
                activeCount++;
            }

            if (activeCount > 0)
            {
                NetIsActive = true;
                NetCoolantTemperature = energySum / massSum;

                foreach (var conditioner in Conditioners)
                {
                    if (!conditioner.IsConnected() || !conditioner.IsActive())
                    {
                        continue;
                    }

                    conditioner.CoolantTemperature = NetCoolantTemperature;
                }
            }
            else
            {
                NetIsActive = false;
            }
        }

        /// <summary>
        ///     Process the Consumers for a Tick. Consumers are the ones who consume Air Flow. They can be Vents (for now).
        ///     We calculate the total Exhaust capacity of the Network. This Exhaust Capacity is used by the Flow Efficiency
        ///     Attribute.
        /// </summary>
        private void TickConsumers()
        {
            var airFlow = 0.0f;

            foreach (var consumer in Consumers)
            {
                if (!consumer.IsConnected())
                {
                    continue;
                }

                airFlow += consumer.ExhaustAirFlow;
            }

            CurrentExhaustAir = airFlow;
        }

        /*
        /// <summary>
        ///     Process the Buildings that Control Climate. Generally, the Climate Control Units.
        ///     Here, we process variables to be used to Thermal Efficiency.
        /// </summary>
        private void TickTempControllers()
        {
            var tempSum = 0.0f;
            var thermalCapacity = 0.0f;
            var activeCount = 0;

            foreach (var compAirFlowTempControl in TempControls)
            {
                if (!compAirFlowTempControl.IsOperating() || !compAirFlowTempControl.IsActive())
                {
                    continue;
                }

                tempSum += compAirFlowTempControl.ConvertedTemperature;
                thermalCapacity += compAirFlowTempControl.ThermalCapacity;
                activeCount++;
            }

            // No Temperature Controllers -> Then Use the Intake Temperature directly.
            if (activeCount > 0)
            {
                ThermalCapacity = thermalCapacity;
                AverageConvertedTemperature = tempSum / activeCount;
            }
            else
            {
                ThermalCapacity = CurrentIntakeAir;
                AverageConvertedTemperature = AverageIntakeTemperature;
            }
        }*/

        /// <summary>
        ///     Register a coolant conditioner in the Network.
        /// </summary>
        /// <param name="conditioner">The Producer's Component</param>
        public void RegisterConditioner(CompCoolantConditioner conditioner)
        {
            if (Conditioners.Contains(conditioner))
            {
                Log.Error("AirFlowNet registered producer it already had: " + conditioner);
                return;
            }

            Conditioners.Add(conditioner);
        }

        /// <summary>
        ///     De-register a coolant conditioner in the Network.
        /// </summary>
        /// <param name="conditioner">The Producer's Component</param>
        public void DeregisterConditioner(CompCoolantConditioner conditioner)
        {
            if (!Conditioners.Contains(conditioner))
            {
                Log.Error("AirFlowNet de-registered producer it already removed: " + conditioner);
                return;
            }

            Conditioners.Remove(conditioner);
        }

        /// <summary>
        ///     Register a Producer of Air Flow in the Network.
        /// </summary>
        /// <param name="producer">The Producer's Component</param>
        public void RegisterProducer(CompCoolantProducer producer)
        {
            if (Producers.Contains(producer))
            {
                Log.Error("AirFlowNet registered producer it already had: " + producer);
                return;
            }

            Producers.Add(producer);
        }

        /// <summary>
        ///     De-register a Producer in the Network.
        /// </summary>
        /// <param name="producer">The Producer's Component</param>
        public void DeregisterProducer(CompCoolantProducer producer)
        {
            if (!Producers.Contains(producer))
            {
                Log.Error("AirFlowNet de-registered producer it already removed: " + producer);
                return;
            }

            Producers.Remove(producer);
        }

        /// <summary>
        ///     Process one Tick of the Air Flow Network. Here we process the Producers, Consumers and Climate Controllers.
        ///     We Calculate the Flow Efficiency (FE) and Thermal Efficiency (TE).
        ///     FE & TEs are recorded for each individual network.
        /// </summary>
        public void CoolantNetTick()
        {
            TickConditioners();
            TickProducers();
            //TickTempControllers();
            TickConsumers();

            if (CurrentIntakeAir > 0)
            {
                ThermalEfficiency = ThermalCapacity / CurrentIntakeAir;
            }
            else
            {
                ThermalEfficiency = 0.0f;
            }

            if (CurrentExhaustAir > 0)
            {
                FlowEfficiency = CurrentIntakeAir / CurrentExhaustAir;

                if (FlowEfficiency > 1.0f)
                {
                    FlowEfficiency = 1.0f;
                }
            }
            else
            {
                FlowEfficiency = 0.0f;
            }
        }

        /// <summary>
        ///     Check if the coolant network is active. That is, if it has any active conditioners.
        /// </summary>
        /// <returns>Boolean Active State</returns>
        public bool IsActive()
        {
            return NetIsActive;
        }

        /// <summary>
        ///     Print the Debug String for this Network
        /// </summary>
        /// <returns>Multi-line String containing Output</returns>
        public string DebugString()
        {
            var stringBuilder = new StringBuilder();
            stringBuilder.AppendLine("------------");
            stringBuilder.AppendLine("AIRFLOW NET:");
            stringBuilder.AppendLine("  Prodcued AirFlow: " + CurrentIntakeAir);
            stringBuilder.AppendLine("  AverageIntakeTemperature: " + AverageIntakeTemperature);
            stringBuilder.AppendLine("  AverageConvertedTemperature: " + AverageConvertedTemperature);

            stringBuilder.AppendLine("  Producers: ");
            foreach (var current in Producers)
            {
                stringBuilder.AppendLine("      " + current.parent);
            }

            //stringBuilder.AppendLine("  TempControls: ");
            //foreach (var current in TempControls)
            //{
            //    stringBuilder.AppendLine("      " + current.parent);
            //}

            stringBuilder.AppendLine("  Consumers: ");
            foreach (var current in Consumers)
            {
                stringBuilder.AppendLine("      " + current.parent);
            }

            stringBuilder.AppendLine("------------");
            return stringBuilder.ToString();
        }
    }
}